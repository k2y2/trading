@model IEnumerable<trading.Models.TxnView>

@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<script src="https://code.jquery.com/jquery-3.5.0.js" integrity="sha256-r/AaFHrszJtwpe+tHyNi/XCfMxYpbsRg2Uqn0x3s2zc=" crossorigin="anonymous"></script>
 
<script type="text/javascript">

    function UpdatePayoutDone(elem) {
        var isDone = $(elem).is(':checked');
        var id = $(elem).data('id');
        //alert(isDone);

        var obj = {
            id: $(elem).data('id'),
            isPayoutDone: $(elem).is(':checked')
        };

        $.ajax({
            type: 'POST',
            url: "/Txn/UpdatePayoutDone",
            data: obj,
            success: function (response) {
                $("#PayoutDoneBy_" + id).html(response);
                console.log(response);
            }
        });
    };

    function UpdateMiniAccount(elem) {  
        //debugger;
        
        
        var obj = {
            id: $(elem).data('id'),
            isMiniAccount: $(elem).is(':checked')
        };

        $.ajax({
            type: 'POST',
            url: "/Txn/UpdateMiniAccount",
            data: obj,
            success: function (response) { 
                console.log(response);
                 



            }
        });
    };

    function UpdateOvernightDeposit(elem) { 

        var obj = {
            id: $(elem).data('id'),
            isOvernightDeposit: $(elem).is(':checked')
        };

        $.ajax({
            type: 'POST',
            url: "/Txn/UpdateOvernightDeposit",
            data: obj,
            success: function (response) { 
                console.log(response);
            }
        });
    };

    $(document).ready(function () { 
        $.fn.dataTable.moment('M/D/YYYY'); 
        var table = $('#tblTxn').DataTable({
            "paging": false,
            "ordering": true,
            "info": false,
            "searching": false, 
            dom: 'Bfrtip',
            buttons: [

                {
                    extend: 'copy',
                    title: '',
                    fieldSeparator: ';',
                    text: 'Copy',
                    exportOptions: {
                        columns: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,21,22,23,24,25,26,27,28,29,30],
                        orthogonal: 'sort'
                    }
                }

            ], 
            columnDefs: [{
                targets: [5, 11, 12], 
                orderDataType: 'dom-checkbox',
                orderable: true,
                render: function (data, type, row, meta) {
                    if (type != 'display') {
                        var $input = $(data).find('input[type="checkbox"]').addBack();
                        data = ($input.prop('checked')) ? "Y" : "N"; 
                    } 
                    return data;
                } 
            }],


            "createdRow": function (row, data, dataIndex) {
                 
                if ($($.parseHTML(data[5])).is(":checked"))
                {                    
                    if (data[1] != "")
                        $(row).css("background-color", "#FF2F2A");
                    else if (data[6]=="C")
                        $(row).css("background-color", "#96f087");
                    else
                        $(row).css("background-color", "#f0ec87");
                }
                else
                {
                    if (data[6] == "C")
                        $(row).css("background-color", "#f7cc94");
                    else
                        $(row).css("background-color", "#e8e3dc");
                }
            } 
        });

        table.buttons().container().appendTo($('#copy'));

        $('#tblTxn tbody').on('click', 'input[type="checkbox"]', function (e) {
            var $row = $(this).closest('tr');
             
            var data = table.row($row).data();
             
            if (this.checked)
            {                
                if (data[1] != "")
                    $row.css("background-color", "#FF2F2A");
                else if (data[6] == "C")
                    $row.css("background-color", "#96f087");
                else
                    $row.css("background-color", "#f0ec87");
            }
            else {
                if (data[6] == "C")
                    $row.css("background-color", "#f7cc94");
                else
                    $row.css("background-color", "#e8e3dc");
            }
        });
    });
</script>

<h1>TX</h1>

<p>
    @*<a asp-action="CreateDeposit">Deposit</a> |
    <a asp-action="CreateLQuote">L-Quote</a> |*@
    <a asp-action="CreateQuote">Quote</a>
</p>

<form asp-action="Index" method="get">
    <div class="form-actions no-color">
        <p>
            <div id="copy" style="float:right"></div>
            <table class="table-borderless">
                <tr>
                    <td>Client</td>
                    <td>@Html.DropDownList("clientID", ViewBag.Client as SelectList, "", new { @class = "form-control" })</td>
                    <td>Client Currency In</td>
                    <td>@Html.DropDownList("clientCurrencyIDIn", ViewBag.ClientCurrencyIn as SelectList, "", new { @class = "form-control" })</td>
                    <td></td>
                </tr>
                <tr>
                    <td>Client Trading Profile</td>
                    <td>@Html.DropDownList("clientTradingProfileID", ViewBag.ClientTradingProfile as SelectList, "", new { @class = "form-control" })</td>
                    <td>Client Currency Out</td>
                    <td>@Html.DropDownList("clientCurrencyIDOut", ViewBag.ClientCurrencyOut as SelectList, "", new { @class = "form-control" })</td>
                    <td></td>
                </tr>
                <tr>
                    <td>Provider Trading Profile</td>
                    <td>@Html.DropDownList("providerTradingProfileID", ViewBag.ProviderTradingProfile as SelectList, "", new { @class = "form-control" })</td>
                    <td>Status</td>
                    <td>@Html.DropDownList("status", ViewBag.Status as SelectList, "", new { @class = "form-control" })</td>
                    <td></td>
                </tr>
                <tr>
                    <td><input type="date" name="dateFilterStart" value="@ViewBag.dateFilterStart" /></td>
                    <td><input type="date" name="dateFilterEnd" value="@ViewBag.dateFilterEnd" /></td>
                    <td>Payout Done</td>
                    <td>@Html.DropDownList("payoutDone", ViewBag.PayoutDone as SelectList, "", new { @class = "form-control" })</td>
                    <td><input type="submit" value="Search" class="btn btn-default" /></td>
                </tr>
            </table>
            @*<a asp-action="Index">Back to Full List</a>*@
        </p>
    </div>
</form>
<table id="tblTxn" class="table table-bordered table-sticky" data-sticky-top="thead tr:first-child" data-sticky-left="tr td:first-child, tr th:first-child">
    <thead>
        <tr>
            <th></th>
            <th>
                @Html.DisplayNameFor(model => model.Alert)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Remark)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.TradeDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ClientTradingProfileName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.PayoutDone)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Status)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ClientAmountIn)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ClientCurrencyNameIn)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ClientAmountOut)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ClientCurrencyNameOut)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.MiniAccount)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.OvernightDeposit)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ClientDfrRate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ClientPriceRate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ClientCurrencyPairName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ClientExRate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ProviderTradingProfileName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ProviderCostDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ProviderCostRate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ProviderExpectedPayInAmount)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ProviderBankAccountName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ReferenceNo)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ClientUniqueDfr)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Type)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.LinkedDepositReferenceNo)
            </th>
            @*<th>
                    @Html.DisplayNameFor(model => model.ClientPayOutAccountName)
                </th>*@
            @*<th>
                    @Html.DisplayNameFor(model => model.ProviderCurrencyName)
                </th>*@
            <th>
                @Html.DisplayNameFor(model => model.PayoutDoneBy)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.DateTimeModified)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ModifiedBy)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.DateTimeAdded)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.AddedBy)
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
        <tr>
            <td>
                <a asp-action="Edit" asp-route-id="@item.id">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.id">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.id">Delete</a>
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Alert)
            </td>
            <td>
                @(item.Remark != null ? "Y" : "N")
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.TradeDate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ClientTradingProfileName)
            </td>
            <td>
                @*@(item.PayoutDone ? "Y" : "N")*@
                @Html.CheckBoxFor(modelItem => item.PayoutDone, new
                {
                    onclick = "UpdatePayoutDone(this)", data_id = item.id
                })
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Status)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ClientAmountIn)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ClientCurrencyNameIn)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ClientAmountOut)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ClientCurrencyNameOut)
            </td>
            <td>
                @Html.CheckBoxFor(modelItem => item.MiniAccount, new
                {
                    onclick = "UpdateMiniAccount(this)", data_id = item.id
                })
            </td>
            <td>
                @Html.CheckBoxFor(modelItem => item.OvernightDeposit, new
                {
                    onclick = "UpdateOvernightDeposit(this)", data_id = item.id
                })
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ClientDfrRate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ClientPriceRate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ClientCurrencyPairName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ClientExRate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ProviderTradingProfileName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ProviderCostDate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ProviderCostRate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ProviderExpectedPayInAmount)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ProviderBankAccountName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ReferenceNo)
            </td>
            <td>
                @(item.ClientUniqueDfr ? "Y" : "N")
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Type)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.LinkedDepositReferenceNo)
            </td>
            @*<td>
                    @Html.DisplayFor(modelItem => item.ClientPayOutAccountName)
                </td>*@
            @*<td>
                    @Html.DisplayFor(modelItem => item.ProviderCurrencyName)
                </td>*@

            <td id="PayoutDoneBy_@Html.Raw(item.id)">
                @Html.DisplayFor(modelItem => item.PayoutDoneBy)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.DateTimeModified)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ModifiedBy)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.DateTimeAdded)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.AddedBy)
            </td>
        </tr>
        }
    </tbody>
    <tfoot>
        <tr><td>Total</td><td></td><td></td><td></td><td></td><td></td><td></td><td><label class="control-label">@ViewBag.ClientAmountInTotal</label></td><td></td><td><label class="control-label">@ViewBag.ClientAmountOutTotal</label></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td><label class="control-label">@ViewBag.ProviderExpectedPayInAmountTotal</label></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr>
    </tfoot>
</table>